require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/ti_clients", type: :request do
  let(:conn) { FactoryBot.create(:connector) }
  let(:valid_attributes) {
    FactoryBot.attributes_for(:ti_client, connector_id: conn.id)
  }

  let(:invalid_attributes) {
    { url: nil }
  }

  before(:each) do
    login_admin
  end

  describe "GET /index" do
    it "renders a successful response" do
      TIClient.create! valid_attributes
      get ti_clients_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      ti_client = TIClient.create! valid_attributes
      get ti_client_url(ti_client)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_ti_client_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      ti_client = TIClient.create! valid_attributes
      get edit_ti_client_url(ti_client)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new TIClient" do
        expect {
          post ti_clients_url, params: { ti_client: valid_attributes }
        }.to change(TIClient, :count).by(1)
      end

      it "redirects to the created ti_client" do
        post ti_clients_url, params: { ti_client: valid_attributes }
        expect(response).to redirect_to(ti_client_url(TIClient.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new TIClient" do
        expect {
          post ti_clients_url, params: { ti_client: invalid_attributes }
        }.to change(TIClient, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post ti_clients_url, params: { ti_client: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {{
        name: "a new name",
      }}

      it "updates the requested ti_client" do
        ti_client = TIClient.create! valid_attributes
        patch ti_client_url(ti_client), params: { ti_client: new_attributes }
        ti_client.reload
        expect(ti_client.name).to eq("a new name")
      end

      it "redirects to the ti_client" do
        ti_client = TIClient.create! valid_attributes
        patch ti_client_url(ti_client), params: { ti_client: new_attributes }
        ti_client.reload
        expect(response).to redirect_to(ti_client_url(ti_client))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        ti_client = TIClient.create! valid_attributes
        patch ti_client_url(ti_client), params: { ti_client: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested ti_client" do
      ti_client = TIClient.create! valid_attributes
      expect {
        delete ti_client_url(ti_client)
      }.to change(TIClient, :count).by(-1)
    end

    it "redirects to the ti_clients list" do
      ti_client = TIClient.create! valid_attributes
      delete ti_client_url(ti_client)
      expect(response).to redirect_to(ti_clients_url)
    end
  end
end
